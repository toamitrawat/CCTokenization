pipeline {
  agent any

  environment {
    AWS_REGION = 'ap-south-1'
    ECR_REPO = 'cctokenization-app'
    IMAGE_TAG = 'latest'
    CLUSTER_NAME = 'free-eks-cluster'
    AWS_ACCOUNT_ID = '538143631035'
    IMAGE_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
  }

  stages {
    stage('Checkout') {
      steps {
        cleanWs()
        git branch: 'main', url: 'https://github.com/toamitrawat/CCTokenization.git'
      }
    }

    stage('Build and Tag Docker Image') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-eks-creds']]) {
          sh '''
            set -e

            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            # Create ECR repo if it doesn't exist
            if ! aws ecr describe-repositories --repository-names $ECR_REPO --region $AWS_REGION > /dev/null 2>&1; then
              echo "Creating ECR repo: $ECR_REPO"
              aws ecr create-repository --repository-name $ECR_REPO --region $AWS_REGION
            fi

            # Build and tag Docker image
            docker build -t $ECR_REPO:$IMAGE_TAG .
            docker tag $ECR_REPO:$IMAGE_TAG $IMAGE_URI
          '''
        }
      }
    }

    stage('Push to ECR') {
      steps {
        sh '''
          docker push $IMAGE_URI
        '''
      }
    }

    stage('Configure kubeconfig and Deploy to EKS') {
      steps{
		withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-eks-creds']]){
        sh '''
		  export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION=$AWS_REGION

          aws sts get-caller-identity  # Debug check
		
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
		  
		  # Generate auth token
        TOKEN=$(aws eks get-token --region $AWS_REGION --cluster-name $CLUSTER_NAME --output text --query 'status.token')

        # Set kubeconfig with bearer token manually
        kubectl config set-credentials jenkins-user --token="$TOKEN"
        kubectl config set-context --current --user=jenkins-user
		
		  
		  # Export AWS_PROFILE env block for subprocesses like kubectl exec plugin
        export KUBECONFIG=/root/.kube/config

        echo "Deploying to EKS"
        kubectl apply -f deployment.yaml --validate=false
        kubectl apply -f service.yaml --validate=false
		 '''
      }
	 }
	}
    
 }

  post {
    always {
      cleanWs()
    }
  }
}
